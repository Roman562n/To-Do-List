/**
  Нормализация блочной модели
 */
*,
::before,
::after {
  box-sizing: border-box;
}

/**
   Убираем внутренние отступы слева тегам списков,
   у которых есть атрибут class
   */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
   Убираем внешние отступы body и двум другим тегам,
   у которых есть атрибут class
   */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
   Убираем внешние отступы вертикали нужным тегам,
   у которых есть атрибут class
   */
:where(h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  ul,
  ol,
  dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
   Убираем стандартный маркер маркированному списку,
   у которого есть атрибут class
   */
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
   Обнуляем вертикальные внешние отступы параграфа,
   объявляем локальную переменную для внешнего отступа вниз,
   чтобы избежать взаимодействие с более сложным селектором
   */
p {
  --paragraphMarginBottom: 24px;

  margin-block: 0;
}

/**
   Внешний отступ вниз для параграфа без атрибута class,
   который расположен не последним среди своих соседних элементов
   */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}


/**
   Упрощаем работу с изображениями и видео
   */
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
   Наследуем свойства шрифт для полей ввода
   */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
     */
  height: 100%;
  /**
     Убираем скачок интерфейса по горизонтали
     при появлении / исчезновении скроллбара
     */
  scrollbar-gutter: stable;
}

/**
   Плавный скролл
   */
html,
:has(:target) {
  scroll-behavior: smooth;
}

body {
  /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
     */
  min-height: 100%;
  /**
     Унифицированный интерлиньяж
     */
  line-height: 1.5;
}

/**
   Нормализация высоты элемента ссылки при его инспектировании в DevTools
   */
a:where([class]) {
  display: inline-flex;
}

/**
   Курсор-рука при наведении на элемент
   */
button,
label {
  cursor: pointer;
}

/**
   Приводим к единому цвету svg-элементы
   (за исключением тех, у которых уже указан
   атрибут fill со значением 'none' или начинается с 'url')
   */
:where([fill]:not([fill="none"],
    [fill^="url"])) {
  fill: currentColor;
}

/**
   Приводим к единому цвету svg-элементы
   (за исключением тех, у которых уже указан
   атрибут stroke со значением 'none')
   */
:where([stroke]:not([stroke="none"],
    [stroke^="url"])) {
  stroke: currentColor;
}

/**
   Чиним баг задержки смены цвета при взаимодействии с svg-элементами
   */
svg * {
  transition-property: fill, stroke;
}

/**
   Приведение рамок таблиц в классический 'collapse' вид
   */
:where(table) {
  border-collapse: collapse;
  border-color: currentColor;
}

/**
   Удаляем все анимации и переходы для людей,
   которые предпочитают их не использовать
   */
@media (prefers-reduced-motion: reduce) {

  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

:root {
  --container-width: 1000px;
  --container-padding-x: 20px;

  --color-light: #ffffff;
  --color-dark: #000000;

  --box-shadow: 3px 5px 10px 0px #787878;
  --box-shadow-inset: inset -3px -4px 8px 0px #787878;
  --border: 3px solid var(--color-dark);
  --border-radius: 15px;

  --transition-duration: .2s;
}

body {
  font-family: Arial, Helvetica, sans-serif;
}

.container {
  max-width: calc(var(--container-width) + var(--container-padding-x) * 2);
  margin-inline: auto;
  padding-inline: var(--container-padding-x);
}

.shadow-block {
  display: flex;
  align-items: center;
  height: 70px;
  padding-inline: 40px;
  box-shadow: var(--box-shadow);
  border-radius: var(--border-radius);
}

.shadow-block--inset {
  box-shadow: var(--box-shadow-inset);
}

.todo__header {
  padding-block: 30px;
}

.todo__title {
  margin-bottom: 30px;
  text-align: center;
}

.create-task__form {
  width: 100%;
  display: flex;
  align-items: center;
  column-gap: 40px;
}

.create-task__input {
  flex-grow: 1;
  border: none;
  background-color: var(--color-light);
  outline: none;
  border: 3px solid transparent;
}

.create-task__input:focus-visible {
 border-bottom: var(--border); 
}

.todo__list {
  display: flex;
  flex-direction: column;
  row-gap: 15px;
}

.todo__item {
  scale: 1;
  transition-duration: var(--transition-duration);
}

.create-task__button {
  position: relative;
  width: 45px;
  height: 45px;
  border-radius: 50%;
  background-color: white;
  box-shadow: var(--box-shadow);
  border: none;
  transition-duration: var(--transition-duration);
}

.create-task__button::before,
.create-task__button::after {
  content: "";

  position: absolute;
  top: 50%;
  left: 50%;
  translate: -50% -50%;
  width: 3px;
  height: 25px;
  background-color: black;
  border-radius: 2px;
  transition-duration: var(--transition-duration);
}

.create-task__button::after {
  rotate: 90deg;
}

.checkbox {
  appearance: none;
  width: 30px;
  height: 30px;
  background-color: var(--color-light);
  box-shadow: inset 0 0 5px rgb(0 0 0 / 0.2);
  border-radius: 10px;
  border: 1px solid #FFFFFF;
  transition: 500ms;
}

.checkbox::after {
  content: "\2714";
  position: absolute;
  top: -5px;
  left: 2px;
  width: 0px;
  height: 0px;
  font-size: 26px;
  transition: 500ms;
  overflow: hidden;
}

.checkbox-input:checked::after {
  width: 30px;
  height: 30px;
  transition: 500ms;
}

.checkbox-input:disabled {
  background: #ccc;
  border-color: #ccc;
}

.checkbox-input:disabled::after {
  filter: grayscale(100%);
}


@media (hover: hover) {
  .todo__item:hover {
    scale: 1.03;
  }

  .create-task__button:hover {
    background-color: black;

    &::before,
    &::after {
      background-color: white;
    }
  }
}

@media (hover: none) {
  .todo__item:active {
    scale: 1.03;
  }

  .create-task__button:active {
    background-color: black;

    &::before,
    &::after {
      background-color: white;
    }
  }

}
